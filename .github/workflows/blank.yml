name: Build and Push Docker image to AWS ECR

on:
  push:
    branches:
      - development

# ✅ Allow built-in GITHUB_TOKEN to create releases, push tags, etc.
permissions:
  contents: write   

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    ################################################################
    ###                CHECKOUT SOURCE CODE                      ###
    ################################################################
    - name: Check out the repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Necessary to fetch all tags and history

    ################################################################
    ###               SONAR CLOUD SCAN                           ###
    ### Drops the build if any bugs or vulnerabilities are found.###
    ###            Using the default quality gate.               ###
    ################################################################
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Built-in GitHub token
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Add in repo secrets

    ################################################################
    ###               DETERMINE NEXT VERSION                     ###
    ###   Used for creating new releases and image tags          ###
    ################################################################
    - name: Determine Next Version
      id: next_version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag, assume semver, and sort.
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        
        # If there's no tag yet, start with v0.0.0. Used for new repos
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        
        # Increment the patch version
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        
        # Output the next version
        echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_TAG"

    ################################################################
    ###                     CREATE RELEASE                       ###
    ###  Creating release with the tag from the previous step    ###
    ################################################################
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # ✅ using built-in token now
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        release_name: Release ${{ steps.next_version.outputs.tag }}
        draft: false
        prerelease: false

    ################################################################
    ###                  BUILD DOCKER IMAGE                      ###
    ###         Build Docker image from the Dockerfile           ###
    ################################################################
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: counter-service-app   # ✅ fixed repo name
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    ###########################################################
    ###  Docker image Snyk scan | If fails, drop the action ###
    ###       Connected to my personal Snyk account         ###
    ###########################################################               
    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
         image: ${{ env.IMAGE_NAME }}
         args: --severity-threshold=high --policy-path=.snyk
      continue-on-error: false

    ###########################################################
    ###                   PUSH IMAGE TO ECR                 ###
    ###     Tag Docker image as "latest" and push to ECR    ###
    ########################################################### 
    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: counter-service-app   # ✅ fixed repo name
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        # Tag the image as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push the specific version tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Push the latest tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
